version: '3.9'

x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: "kong"
  KONG_PASSWORD: "kong"
  KONG_ENFORCE_RBAC: "on"
  KONG_ADMIN_GUI_AUTH: "basic-auth"
  #KONG_ADMIN_GUI_AUTH_CONF: '{ "hide_credentials": true }'
  KONG_ADMIN_GUI_SESSION_CONF: '{"cookie_name":"admin_session","cookie_samesite":"off","secret":"kong","cookie_secure":false,"storage":"kong"}'

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  postgres:
    driver_opts:
      type: tmpfs
      device: tmpfs
  influxdb:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-net:
    external: false

services:

  ###
  # Netshoot: Utilities and queries against http-echo
  ###
  netshoot:
    image: nicolaka/netshoot
    environment:
      <<: *kong-env
      DECK_KONG_ADDR: 'http://kong:8001'
      DECK_HEADERS: "kong-admin-token:kong"
    networks:
      - kong-net
    command: bash /scripts/test.sh
    volumes:
      - ${PWD}:/scripts
      - ${PWD}/config:/config

  ###
  # http-echo: local http echo server
  ###
  http-echo:
    image: echoserver
    networks:
      - kong-net
    ports:
      - "8080:8080"

  ###
  # tcp-echo: local tcp echo server
  ###
  tcp-echo:
    image: istio/tcp-echo-server:1.1
    networks:
      - kong-net
    ports:
      - "9000:9000"

  ###
  # Zipkin: Tracing with Zipkin
  #
  # export COMPOSE_PROFILES="${COMPOSE_PROFILES},zipkin"
  ###
  zipkin:
    profiles: [ "zipkin" ]
    hostname: metrics
    image: openzipkin/zipkin:2
    networks:
      - kong-net
    ports:
      - "9411:9411"
    restart: on-failure

  ###
  # Jaeger: Tracing with Jaeger
  #
  # export COMPOSE_PROFILES="${COMPOSE_PROFILES},jaeger"
  ###
  jaeger:
    profiles: [ "jaeger" ]
    hostname: metrics
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9412"
    image: jaegertracing/all-in-one:latest
    networks:
      - kong-net
    ports:
      - "9412:9412"
      - "16686:16686"

  ###
  # InfluxDB: Influx for Kong Vitals metrics
  #
  # export COMPOSE_PROFILES="${COMPOSE_PROFILES},influx"
  ###
  influxdb:
    profiles:
      - influx
    image: influxdb:1.8
    environment:
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin
      INFLUXDB_USER: user
      INFLUXDB_USER_PASSWORD: user
      INFLUXDB_DB: kong
    volumes:
      - influxdb:/var/lib/influxdb
    networks:
      - kong-net
    ports:
      - "8086:8086"
      - "8083:8083"
    restart: on-failure:5

  ###
  # Deck: Import known config into empty Kong
  #
  # export COMPOSE_PROFILES="${COMPOSE_PROFILES},database"
  ###
  deck:
    image: kong/deck
    command: sync --state config/kong.yaml
    profiles: [ "database" ]
    depends_on:
      kong:
        condition: service_healthy
    environment:
      <<: *kong-env
      DECK_KONG_ADDR: 'http://kong:8001'
      DECK_HEADERS: "kong-admin-token:kong"
    networks:
      - kong-net
    volumes:
      - ${PWD}/config:/config

  ###
  # Kong Migrations: Prepare the Kong Database
  #
  # export COMPOSE_PROFILES="${COMPOSE_PROFILES},database"
  ###
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: >
      bash -c "(kong migrations bootstrap && kong migrations up && sleep 10 && kong migrations finish) || kong migrations up --vv"
    profiles: [ "database" ]
    depends_on:
      db:
        condition: service_healthy
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  ###
  # Kong: The API Gateway
  #
  # export COMPOSE_PROFILES="${COMPOSE_PROFILES},database"
  ###
  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_VITALS: "${KONG_VITALS:-on}"
      #KONG_VITALS_STRATEGY: "${KONG_VITALS_STRATEGY:-influxdb}"
      #KONG_VITALS_TSDB_ADDRESS: influxdb:8086
      KONG_LICENSE_DATA: "${KONG_LICENSE_DATA}"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_KEYRING_ENABLED: "off"
      KONG_STATUS_LISTEN: "${KONG_STATUS_LISTEN:-0.0.0.0:8100}"
      KONG_PORTAL: "on"
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      - "0.0.0.0:8100:8100/tcp"
      - "0.0.0.0:8001:8001/tcp"
      - "0.0.0.0:8002:8002/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  ###
  # DB: The Kong Database server
  # export COMPOSE_PROFILES="${COMPOSE_PROFILES},database"
  ###
  db:
    image: postgres:13
    profiles: [ "database" ]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - postgres:/var/lib/postgresql/data

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD
